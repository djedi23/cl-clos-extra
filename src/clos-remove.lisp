(in-package :cl-clos-extra)

(defclass removable-slot-class (standard-class)  ())
(defmethod sb-mop:validate-superclass ((class removable-slot-class) (superclass standard-class)) t)

(defclass removable-slot-definition (sb-mop:standard-direct-slot-definition)
  ((remove :initarg :remove :initform nil :reader slot-definition-remove)))
(defclass removable-effective-slot-definition (sb-mop:standard-effective-slot-definition)
  ((remove :initarg :remove :reader slot-definition-remove)))

(defmethod sb-mop:direct-slot-definition-class ((class removable-slot-class) &rest initargs)
  (declare (ignore initargs))
  (find-class 'removable-slot-definition))
(defmethod sb-mop:effective-slot-definition-class ((class removable-slot-class) &rest initargs)
  (declare (ignore initargs))
  (find-class 'removable-effective-slot-definition))
(defmethod sb-mop:compute-effective-slot-definition ((class removable-slot-class) name slots)
  (let ((slotd (call-next-method)))
    (copy-slot-definition slotd 'remove slots)
    slotd))

(defmethod sb-mop:slot-value-using-class ((class removable-slot-class) object (slot removable-effective-slot-definition))
  (if (slot-definition-remove slot)
      (slot-missing class object (sb-mop:slot-definition-name slot) 'slot-value)
      (call-next-method)))
(defmethod (setf sb-mop:slot-value-using-class) (new-value (class removable-slot-class) object (slot removable-effective-slot-definition))
  (if (slot-definition-remove slot)
      (slot-missing class object (sb-mop:slot-definition-name slot) 'slot-value)
      (call-next-method)))
